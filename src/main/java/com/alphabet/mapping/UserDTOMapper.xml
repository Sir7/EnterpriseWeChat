<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 设置为UserDao接口方法提供sql语句配置，这里专为实体类UserEntity写的映射文件，所以namespace必须写成实体类所在的包名+类名 -->
<mapper namespace="com.alphabet.entity.UserDOModel.UserDO">

    <!--
    将数据库表与实体类字段一一对应，这样后面查询写的sql要获取单个对象时，
    返回类型resultMap与下面这个resultMap的id（UserResultMap）相等就可以了，这样字段与数据就对应上了
    column是数据库表字段，property是实体类属性，jdbcType是数据库表中该字段的类型
    -->
    <resultMap id="UserResultMap" type="com.alphabet.entity.UserDOModel.UserDO">
        <id column="id" property="empId" jdbcType="VARCHAR" /> 	<!--主键-->
        <result column="user_name" property="userName" jdbcType="VARCHAR" />
        <result column="login_name" property="loginName" jdbcType="VARCHAR" />
        <result column="email" property="email" jdbcType="VARCHAR" />
        <result column="user_id" property="userId" jdbcType="VARCHAR" />
        <result column="post" property="post" jdbcType="VARCHAR" />
        <result column="address" property="address" jdbcType="VARCHAR" />
        <result column="is_delete" property="is_delete" jdbcType="VARCHAR" />
        <result column="delete_user" property="deleteUser" jdbcType="VARCHAR" />
        <result column="police_id" property="policeId" jdbcType="VARCHAR" />
        <result column="station" property="station" jdbcType="VARCHAR" />
        <result column="mobile" property="mobile" jdbcType="VARCHAR" />
        <result column="telephone" property="telephone" jdbcType="VARCHAR" />
        <result column="comments" property="comments" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="VARCHAR" />
        <result column="org_id" property="orgId" jdbcType="VARCHAR" />
        <result column="org_name" property="orgName" jdbcType="VARCHAR" />
        <result column="birthday" property="birthday" jdbcType="VARCHAR" />
        <result column="url_path" property="urlPath" jdbcType="VARCHAR" />
        <result column="is_superadmin" property="isSuperadmin" jdbcType="VARCHAR" />
    </resultMap>

    <!--
     SELECT * FROM T_USER WHERE id = #{id,jdbcType=VARCHAR}
     中的#{id,jdbcType=VARCHAR}内的id与方法中所传递的参数名一致！！！
    -->

    <!--
    id与抽象类中的方法名保持一致
    如：public UserDOModel getUserById(String id);
        public UserDOModel getUserByUserId(String userId);
        public Map<String,String> getUserInfoByUserId(String userId);


    resultType返回类型
    1、基本类型：resultType=基本类型
    2、List类型：resultType=List中元素的类型，如List<UserDOModel>,那么resultType=“com.alphabet.entity.UserDOModelModel.UserDOModel  3、Map类型： 单条记录：resultType = map
                 多条记录：resultType =Map中value的类型，如：Map<String,UserDOModel>,resultType为com.alphabet.entity.UserDOModel
    4、对象类型：com.alphabet.entity.UserDOModelModel.UserDOModel  parameterType传入方法参数类型：
	int/double/long/Date/java.lang.String,
	java.util.Map/java.util.List,
	com.alphabet.entity.UserDTO的话就不写该属性
    -->

    <!-- 单个参数查询 -->
    <!--根据id获取用户-->
    <select id="getUserById" resultMap="UserResultMap" parameterType="java.lang.String">
        SELECT * FROM T_USER WHERE id = #{id,jdbcType=VARCHAR}
    </select>

    <!--根据userId获取用户-->
    <select id="getUserByUserId" resultMap="UserResultMap" parameterType="java.lang.String">
        SELECT * FROM T_USER WHERE user_id = #{userId,jdbcType=VARCHAR}
    </select>

    <!--根据userId获取部分对象数据-->
    <select id="getUserInfoByUserId" resultType="java.util.Map" parameterType="java.lang.String">
        SELECT user_name as userName,user_id as userId FROM T_USER WHERE user_id = #{userId,jdbcType=VARCHAR}
    </select>


    <!--多个参数查询
        多参数那么就不能使用parameterType， 改用#｛index｝是第几个就用第几个的索引，索引从0开始，
        类中dao中写的getUserInfoByInfo(String userName,String email,String status);方法的参数顺序也得与这里的sql中的条件一一对应
    -->
    <select id="getUserInfoByInfo"  resultMap="UserResultMap">
        SELECT * FROM T_USER WHERE user_name = #{0} AND email=#{1} AND status=#{2}
    </select>

    <!--多个参数查询map封装，
    接口内中的方法public List<UserDOModel> getUserInfoByInfoData(Map map);
    直接用key就可以取值，key是什么，那么#{}中就写什么，parameterType="map"不写也可以-->
    <select id="getUserInfoByInfoData" parameterType="Map" resultMap="UserResultMap">
        SELECT * FROM T_USER
        WHERE user_name = #{userName,jdbcType=VARCHAR}
        AND login_name = #{loginName,jdbcType=VARCHAR}
        AND org_id = #{ordgId,jdbcType=VARCHAR}
    </select>

    <!--多个参数查询List封装，
    接口内中的方法public List<UserDOModel> getUserInfoByInfoData(List<String> list);
    直接用key就可以取值，key是什么，那么#{}中就写什么，parameterType="map"不写也可以-->
    <!--<select id="getUserInfoByInfoData" parameterType="java.util.List" resultMap="UserResultMap">
        SELECT * FROM T_USER
        WHERE user_id in
        <foreach item="item1" index="index" collection="list" open="(" separator="," close=")">
            #{item1}
        </foreach>
        &lt;!&ndash; item="item1"，给此次循环取别名，这个别名就是item1,
        此次循环的顺序是index，顺序进行，
        collection="list"中的list就是List<String> list中的list &ndash;&gt;
    </select>-->


    <!--多个参数传递之注解方式，
    接口内中的方法public UserDOModel getUserInfo(@Param("userid")String userId, @Param("orgid")String orgId);
    parameterType的，现在可以不写
    userid就是下面的user_id=#{userid}，orgid就是下面的org_id=#{orgid}
    -->
    <select id="getUserInfo"  resultMap="UserResultMap">
        SELECT * FROM T_USER
        WHERE user_id=#{userId,jdbcType=VARCHAR} and org_id=#{orgId,jdbcType=VARCHAR}
    </select>


    <!--模糊查询，有三种-->
    <!--<select id="getUsersByFuzzyQuery" parameterType="User" resultMap="UserResultMap">
        select * from users
        <where>-->
            <!--
                方法一: 直接使用 % 拼接字符串
                注意:此处不能写成  "%#{name}%" ,#{name}就成了字符串的一部分,
                会发生这样一个异常: The error occurred while setting parameters,
                应该写成: "%"#{name}"%",即#{name}是一个整体,前后加上%
            -->
            <!--<if test="name != null">
                name like "%"#{name}"%"
            </if>-->
            <!--方法二: 使用concat(str1,str2)函数将两个参数连接 -->
            <!--<if test="phone != null">
                and phone like concat(concat("%",#{phone}),"%")
            </if>-->
            <!--方法三: 使用 bind 标签,对字符串进行绑定,然后对绑定后的字符串使用 like 关键字进行模糊查询 -->
            <!--<if test="email != null">
                <bind name="pattern" value="'%'+email+'%'"/>
                and email like #{pattern}
            </if>
        </where>
    </select>-->


    <!-- 新增-->
    <!--插入数据，主键自增 ，适用Mysql,SQL Server数据库 -->
    <insert id="addEmp" parameterType="com.alphabet.entity.UserDOModel.UserDO" useGeneratedKeys="true" keyProperty="user_id">
        insert into T_USER(user_name,email,org_id,数据库字段)
        values(#{userName},#{email},#{orgId},#{实体类属性})
    </insert>


    <!--不自增的插入数据
     <selectKey>子元素来生成主键值，并将值保存到Student对象的studId 属性上。
     属性order=“before”表示MyBatis将取得序列的下一个值作为主键值，
    并且在执行INSERT语句之前将值设置到id属性上
    -->
    <!--<insert id="addEmp" parameterType="com.alphabet.entity.UserDOModelModel.UserDOModel       <selectKey keyProperty="id" resultType="String" order="BEFORE">
            select  replace(uuid(),'-','')   UUID;
        </selectKey>

        insert into T_USER(id,user_name,email,org_id,数据库字段)
        values(#{id,jdbcType=VARCHAR},#{userName,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR},#{orgId,jdbcType=Integer},#{实体类属性})
    </insert>-->


    <!-- 批量删除 -->
    <delete id="deleteUserBatch" parameterType="List">
        delete from T_USER where
        <foreach item="id" collection="List" open="ID in (" separator="," close=")">
            #{id}
        </foreach>
    </delete>


    <!--批量删除
	适用@Param注解传参
    deleteByLogIdAndNames(@Param("logid") Integer logID, @Param("names") String[] namesArray);
    这里的logid就是下面的logid = #{logid,jdbcType=INTEGER}中的，
    names就是下面的collection="names"
    -->
    <delete id="deleteByLogIdAndNames">
        delete from t_user
        where log_name = #{logName,jdbcType=VARCHAR} AND user_name IN
        <foreach collection="names" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>


    <!-- 批量更新 -->
    <update id="updateEmpByBatch"  parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" separator=";">
            update T_USER
            <set >
                <if test="item.userName != null" >
                    user_name = #{item.empName,jdbcType=VARCHAR},
                </if>
                <if test="item.userId != null" >
                    user_id = #{item.userId,jdbcType=VARCHAR},
                </if>
            </set>
            where org_id = #{item.orgId,jdbcType=INTEGER}
        </foreach>
    </update>

</mapper>